<?xml version="1.0" encoding="UTF-8"?>
<project name="JTrace" default="generate-release" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property file="build.properties" />

	<description>
	</description>

	<property name="ivy.install.version" value="2.1.0-rc2" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<path id="sources">
	    <pathelement location="${src_action_dir}" />
	    <pathelement location="${src_model_dir}" />
	</path>
	
	<path id="classpath">
		<fileset dir="${lib_dir}" includes="**/*.jar"/>
	</path>
	
	<path id="test-classpath">
		<path refid="classpath" />
		<pathelement location="${action_classes_dir}" />
		<pathelement location="${model_classes_dir}" />
	</path>
	
	<path id="run-classpath">
        <path refid="classpath" />
        <pathelement location="${lib_dir}" />
        <pathelement path="${dist_dir}/jtrace.jar" />
    </path>

    <target name="bootstrap" description="Prepares the build folder structure.">
        <mkdir dir="${lib_dir}" />
        <mkdir dir="${dist_dir}"/>
        <mkdir dir="${dist_dependencies_dir}"/>
    </target>
	
    <target name="download-ivy" depends="bootstrap" unless="offline" description="Downloads Apache Ivy distribution.">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy" description="Initializes Apache ivy for dependency management.">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
	
    <target name="download-libs" description="Downloads the libraries required for compilation." depends="init-ivy">
        <ivy:retrieve pattern="lib/[artifact]-[type]-[revision].[ext]"  />
        
        <taskdef resource="testngtasks" classpath="${testng_jar}"/>
    </target>

    <target name="clean" description="Deletes the build artifacts.">
        <delete dir="${dist_dir}" />
        <delete dir="${classes_dir}" includeemptydirs="true" includes="*/**/*" />
    </target>
    
    <target name="clean-libs" description="Deletes all library files">
        <delete includeemptydirs="true">
            <fileset dir="${lib_dir}" includes="**/*.jar" />
        </delete>
    </target>
    
    <target name="clean-all" depends="clean,clean-libs" description="Clean all build artifacts." />
        
	<target name="prepare-compile" description="Creates the build infrastructure.">
		<mkdir dir="${model_classes_dir}" />
		<mkdir dir="${action_classes_dir}" />
		<mkdir dir="${test_classes_dir}" />
		<mkdir dir="${swing_classes_dir}"/>
		<mkdir dir="${examples_classes_dir}" />
		<mkdir dir="${javadoc_classes_dir}" />
	</target>

	<target name="compile-model" depends="prepare-compile" description="Compiles the model classes.">
		<javac srcdir="${src_model_dir}" destdir="${model_classes_dir}" source="${target_vm}" target="${target_vm}" debug="on" includeantruntime="false" classpathref="classpath" />
	</target>

	<target name="compile-action" depends="prepare-compile, compile-model" description="Compiles the action classes.">
		<javac srcdir="${src_action_dir}" destdir="${action_classes_dir}" source="${target_vm}" target="${target_vm}" debug="on" classpath="${model_classes_dir}" includeantruntime="false" classpathref="classpath" />
	</target>
	
	<target name="compile-swing" depends="prepare-compile, compile-action" description="Compiles the Swing Extension classes.">
	    <javac srcdir="${src_action_dir}" destdir="${action_classes_dir}" source="${target_vm}" target="${target_vm}" debug="on" classpath="${model_classes_dir}" includeantruntime="false" classpathref="classpath" />
  </target>
	
	<target name="compile-examples" depends="prepare-compile, compile" description="Compiles the example classes.">
      <javac srcdir="${src_action_dir}" destdir="${action_classes_dir}" source="${target_vm}" target="${target_vm}" debug="on" classpath="${model_classes_dir}" includeantruntime="false" classpathref="classpath" />
  </target>

	<target name="compile-test" depends="compile-action" description="Compiles the test classes.">
		<javac srcdir="${src_test_dir}" destdir="${test_classes_dir}" source="${target_vm}" target="${target_vm}" debug="on" includeantruntime="false">
			<classpath refid="test-classpath" />
		</javac>
	</target>
	
	<target name="compile" depends="compile-model,compile-action,compile-swing,compile-test,compile-javadoc" description="Compiles the project." />

    <target name="compile-javadoc" description="Generates the javadocs.">
          <javadoc sourcepathref="sources" destdir="${javadoc_classes_dir}" classpathref="classpath" classpath="${classes_dir}"/>
    </target>

	<target name="dist" depends="download-libs,compile,compile-swing" description="Creates the JTrace jars.">
		<jar destfile="${jtrace_jar}">
			<fileset dir="${model_classes_dir}" includes="**/*.class" />
			<fileset dir="${action_classes_dir}" includes="**/*.class" />
		</jar>
		
		<jar destfile="${jtrace_swing_jar}">
            <fileset dir="${swing_classes_dir}" includes="**/*.class" />
        </jar>
        
		<jar destfile="${jtrace_javadoc_jar}">
		    <fileset dir="${javadoc_classes_dir}" />
		</jar>
		
		<jar destfile="${jtrace_source_jar}">
            <fileset dir="${src_dir}" includes="**/*"/>
        </jar>
		
		<copy todir="${dist_dependencies_dir}">
            <fileset dir="${lib_dir}" includes="**/*.jar" excludes="ant-*.jar, aopalliance-*.jar, bsh-*.jar, guice-*.jar, jcommander-*.jar, junit-*.jar" />
        </copy>
        
		<copy tofile="${dist_dir}/README.txt" >
            <fileset dir="." includes="README.md" />
        </copy>
	</target>
	
	<target name="test" depends="dist" description="Run the tests.">
		<mkdir dir="${reports_dir}" />
		
        <testng outputDir="${reports_dir}"
                haltOnFailure="true" verbose="2">
            <classpath refid="run-classpath" />
        	<classpath path="${test_classes_dir}" />
        	
        	<classfileset dir="${test_classes_dir}" includes="**/*.class" />
        </testng>
	</target>
	
	<target name="generate-release" depends="test" description="Generates the release zip.">
     
	    <zip destfile="${dist_dir}/jtrace.zip"
	          basedir="${dist_dir}"
	         includes="**/*.jar, README.txt" />
	    
	    <delete dir="${dist_dir}" includes="*.jar" />
	    <delete dir="${dist_dependencies_dir}" />
	</target>
</project>
